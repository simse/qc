package update

import (
	"github.com/equinox-io/equinox"
)

// assigned when creating a new application in the dashboard
const appID = "app_f8QR41eX1qB"

// public portion of signing key generated by `equinox genkey`
var publicKey = []byte(`
-----BEGIN ECDSA PUBLIC KEY-----
MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE579TbR+sSMLlBICjldy9bvO6HtvW2dfy
vvFdEC89x3BXyVDiUz/L5gq9anRxOGU0FFs+cuj3g7dcKv+tJThqWEqcATNvbpBw
l/hkgtOhcRKqj9q6vMcQ6xiYp6AZVqsh
-----END ECDSA PUBLIC KEY-----
`)

// Do performs an update of qc (in-place no less!)
func Do() error {
	var opts equinox.Options
	if err := opts.SetPublicKeyPEM(publicKey); err != nil {
		return err
	}

	// check for the update
	resp, err := equinox.Check(appID, opts)
	switch {
	case err == equinox.NotAvailableErr:
		//fmt.Println("No update available, already at the latest version!")
		return err
	case err != nil:
		//fmt.Println("Update failed:", err)
		return err
	}

	// fetch the update and apply it
	err = resp.Apply()
	if err != nil {
		return err
	}

	// fmt.Printf("Updated to new version: %s!\n", resp.ReleaseVersion)
	return nil
}
